[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.python爬虫相关篇","date":"2025-07-22T09:00:44.528Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.大江狗入门","date":"2025-07-22T09:00:02.527Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.大江狗如何连接如数据","date":"2025-07-22T08:59:25.145Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.python连接数据库","date":"2025-07-22T08:59:03.472Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.大江狗如何搭建后台管理系统","date":"2025-07-22T08:58:41.989Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"1.大江狗学习如果搭建博客","date":"2025-07-22T08:58:13.586Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"网络请求库-最佳操作","date":"2025-07-22T08:39:22.041Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"主要参考https://pythondjango.cn/python/advanced/2-python-multi-threads-multiprocessing/\n","slug":"2.进程-线程","date":"2025-07-22T08:37:37.102Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Python with 语句使用对比本文展示了在各种常见场景下使用 Python 的 with 上下文管理器与不使用时的写法对比。with 语句依赖于上下文管理器（实现了 __enter__ 和 __exit__ 的对象）如果一个类没有实现 __enter__ 和 __exit__，那么就用不了 with\n\n1. 文件操作✅ 使用 with12with open(&#x27;example.txt&#x27;, &#x27;r&#x27;) as file:    content = file.read()\n\n⚠️ 不使用 with12345file = open(&#x27;example.txt&#x27;, &#x27;r&#x27;)try:    content = file.read()finally:    file.close()\n\n\n2. 线程锁✅ 使用 with123456import threadinglock = threading.Lock()with lock:    print(&quot;Thread-safe section&quot;)\n\n⚠️ 不使用 with123456789import threadinglock = threading.Lock()lock.acquire()try:    print(&quot;Thread-safe section&quot;)finally:    lock.release()\n\n\n3. 数据库连接（sqlite3）✅ 使用 with12345import sqlite3with sqlite3.connect(&#x27;test.db&#x27;) as conn:    cursor = conn.cursor()    cursor.execute(&quot;INSERT INTO users (name) VALUES (&#x27;Tom&#x27;)&quot;)\n\n⚠️ 不使用 with123456789101112import sqlite3conn = sqlite3.connect(&#x27;test.db&#x27;)try:    cursor = conn.cursor()    cursor.execute(&quot;INSERT INTO users (name) VALUES (&#x27;Tom&#x27;)&quot;)    conn.commit()except Exception:    conn.rollback()    raisefinally:    conn.close()\n\n\n4. Socket 网络连接✅ 使用 with1234import socketwith socket.create_connection((&#x27;example.com&#x27;, 80)) as s:    s.sendall(b&#x27;GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n&#x27;)\n\n⚠️ 不使用 with1234567import sockets = socket.create_connection((&#x27;example.com&#x27;, 80))try:    s.sendall(b&#x27;GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n&#x27;)finally:    s.close()\n\n\n5. 自定义上下文管理器✅ 使用 with12345678910class MyContext:    def __enter__(self):        print(&quot;Start&quot;)        return self    def __exit__(self, exc_type, exc_val, exc_tb):        print(&quot;End&quot;)with MyContext():    print(&quot;Doing something&quot;)\n\n⚠️ 不使用 with123456789101112class MyContext:    def start(self):        print(&quot;Start&quot;)    def end(self):        print(&quot;End&quot;)ctx = MyContext()ctx.start()try:    print(&quot;Doing something&quot;)finally:    ctx.end()\n","slug":"with","date":"2025-07-22T08:28:13.043Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"进程、线程、协程与事件循环\n0. 基本概念\n进程（Process）\n子进程（Process）\n多进程（Multiprocessing）\n主进程（Main process）\n进程间的通信（IPC）\n\n\n1. 进程、线程、协程的关系\n一个进程（Process）下可以有多个线程（Thread），而协程（Coroutine）是比线程更小的单元。\n协程不是在线程中运行的，而是运行在单个线程的事件循环中。\n\n\n2. Python 的事件循环（asyncio）Python 使用了一个叫 asyncio 的库，提供了所谓的事件循环，和 JS 的事件循环概念类似。\n示例代码123456789101112import asyncioimport timeasync def job(name):    print(f&quot;&#123;name&#125; start at &#123;time.strftime(&#x27;%X&#x27;)&#125;&quot;)    await asyncio.sleep(1)    print(f&quot;&#123;name&#125; end at &#123;time.strftime(&#x27;%X&#x27;)&#125;&quot;)async def main():    await asyncio.gather(job(&quot;A&quot;), job(&quot;B&quot;))asyncio.run(main())\n\n输出1234A start at 16:10:01B start at 16:10:01A end at 16:10:02B end at 16:10:02\n\n\n3. 多进程（multiprocessing）解决 GIL 问题\n使用多进程可以发挥 CPU 多核的能力，解决 GIL 锁的问题。\n推荐用于 CPU 密集型任务。\n\n示例代码12345678910from multiprocessing import Pool, cpu_countimport timedef cpu_task(x):    return sum(i * i for i in range(1000000))if __name__ == &quot;__main__&quot;:    with Pool(cpu_count()) as p:        results = p.map(cpu_task, range(8))    print(results)\n\n\n4. 使用异步（asyncio）处理 I&#x2F;O 密集型任务为什么使用异步？I&#x2F;O 操作本身会“等”很久，比如：\n\n下载网页\n读取数据库\n打开文件\n等待网络响应\n\n这些操作中 CPU 几乎不干活，只是等待，所以这时候协程就特别有用。\n\n","slug":"1.进程-线程-协程-事件循环","date":"2025-07-22T08:15:17.352Z","categories_index":"","tags_index":"","author_index":"小郑"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2025-07-22T06:09:07.925Z","categories_index":"","tags_index":"","author_index":"小郑"}]