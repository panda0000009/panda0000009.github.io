{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"1.进程-线程-协程-事件循环","date":"2025-07-22T08:15:17.352Z","updated":"2025-07-22T08:37:09.858Z","comments":true,"path":"api/articles/1.进程-线程-协程-事件循环.json","keywords":null,"cover":null,"content":"<h1 id=\"进程、线程、协程与事件循环\"><a href=\"#进程、线程、协程与事件循环\" class=\"headerlink\" title=\"进程、线程、协程与事件循环\"></a>进程、线程、协程与事件循环</h1><hr>\n<h2 id=\"0-基本概念\"><a href=\"#0-基本概念\" class=\"headerlink\" title=\"0. 基本概念\"></a>0. 基本概念</h2><ul>\n<li><strong>进程（Process）</strong></li>\n<li><strong>子进程（Process）</strong></li>\n<li><strong>多进程（Multiprocessing）</strong></li>\n<li><strong>主进程（Main process）</strong></li>\n<li><strong>进程间的通信（IPC）</strong></li>\n</ul>\n<hr>\n<h2 id=\"1-进程、线程、协程的关系\"><a href=\"#1-进程、线程、协程的关系\" class=\"headerlink\" title=\"1. 进程、线程、协程的关系\"></a>1. 进程、线程、协程的关系</h2><ul>\n<li>一个进程（Process）下可以有多个线程（Thread），而协程（Coroutine）是比线程更小的单元。</li>\n<li>协程不是在线程中运行的，而是运行在单个线程的事件循环中。</li>\n</ul>\n<hr>\n<h2 id=\"2-Python-的事件循环（asyncio）\"><a href=\"#2-Python-的事件循环（asyncio）\" class=\"headerlink\" title=\"2. Python 的事件循环（asyncio）\"></a>2. Python 的事件循环（asyncio）</h2><p>Python 使用了一个叫 <code>asyncio</code> 的库，提供了所谓的事件循环，和 JS 的事件循环概念类似。</p>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">job</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;name&#125;</span> start at <span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;name&#125;</span> end at <span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(job(<span class=\"string\">&quot;A&quot;</span>), job(<span class=\"string\">&quot;B&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A start at 16:10:01</span><br><span class=\"line\">B start at 16:10:01</span><br><span class=\"line\">A end at 16:10:02</span><br><span class=\"line\">B end at 16:10:02</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-多进程（multiprocessing）解决-GIL-问题\"><a href=\"#3-多进程（multiprocessing）解决-GIL-问题\" class=\"headerlink\" title=\"3. 多进程（multiprocessing）解决 GIL 问题\"></a>3. 多进程（multiprocessing）解决 GIL 问题</h2><ul>\n<li>使用多进程可以发挥 CPU 多核的能力，解决 GIL 锁的问题。</li>\n<li>推荐用于 <strong>CPU 密集型任务</strong>。</li>\n</ul>\n<h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool, cpu_count</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cpu_task</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> Pool(cpu_count()) <span class=\"keyword\">as</span> p:</span><br><span class=\"line\">        results = p.<span class=\"built_in\">map</span>(cpu_task, <span class=\"built_in\">range</span>(<span class=\"number\">8</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(results)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-使用异步（asyncio）处理-I-O-密集型任务\"><a href=\"#4-使用异步（asyncio）处理-I-O-密集型任务\" class=\"headerlink\" title=\"4. 使用异步（asyncio）处理 I&#x2F;O 密集型任务\"></a>4. 使用异步（asyncio）处理 I&#x2F;O 密集型任务</h2><h3 id=\"为什么使用异步？\"><a href=\"#为什么使用异步？\" class=\"headerlink\" title=\"为什么使用异步？\"></a>为什么使用异步？</h3><p>I&#x2F;O 操作本身会“等”很久，比如：</p>\n<ul>\n<li>下载网页</li>\n<li>读取数据库</li>\n<li>打开文件</li>\n<li>等待网络响应</li>\n</ul>\n<p>这些操作中 CPU 几乎不干活，只是等待，所以这时候协程就特别有用。</p>\n<hr>\n","text":"进程、线程、协程与事件循环 0. 基本概念 进程（Process） 子进程（Process） 多进程（Multiprocessing） 主进程（Main pro...","permalink":"/post/1.进程-线程-协程-事件循环","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">进程、线程、协程与事件循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">0. 基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">1. 进程、线程、协程的关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Python-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%88asyncio%EF%BC%89\"><span class=\"toc-text\">2. Python 的事件循环（asyncio）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输出</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%88multiprocessing%EF%BC%89%E8%A7%A3%E5%86%B3-GIL-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3. 多进程（multiprocessing）解决 GIL 问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%EF%BC%88asyncio%EF%BC%89%E5%A4%84%E7%90%86-I-O-%E5%AF%86%E9%9B%86%E5%9E%8B%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">4. 使用异步（asyncio）处理 I&#x2F;O 密集型任务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%EF%BC%9F\"><span class=\"toc-text\">为什么使用异步？</span></a></li></ol></li></ol></li></ol>","author":{"name":"小郑","slug":"blog-author","avatar":"https://youke1.picui.cn/s1/2025/07/22/687f349caec39.png","link":"/","description":"<div>哈哈哈，活着真好</div>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"with","date":"2025-07-22T08:28:13.043Z","updated":"2025-07-22T08:54:03.522Z","comments":true,"path":"api/articles/with.json","keywords":null,"cover":null,"text":"Python with 语句使用对比本文展示了在各种常见场景下使用 Python 的 with 上下文管理器与不使用时的写法对比。with 语句依赖于上下文管理...","permalink":"/post/with","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"小郑","slug":"blog-author","avatar":"https://youke1.picui.cn/s1/2025/07/22/687f349caec39.png","link":"/","description":"<div>哈哈哈，活着真好</div>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2025-07-22T06:09:07.925Z","updated":"2025-07-22T06:09:07.925Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":444,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"小郑","slug":"blog-author","avatar":"https://youke1.picui.cn/s1/2025/07/22/687f349caec39.png","link":"/","description":"<div>哈哈哈，活着真好</div>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}